[project]
name = "seo-agent-platform"
version = "0.1.0"
description = "SEO Agent Platform with LangGraph integration"
authors = [
    { name = "SEO Agent Team", email = "team@seo-agent.com" },
]
readme = "README.md"
license = { text = "MIT" }
requires-python = ">=3.11,<4.0"
dependencies = [
    # LangGraph Core
    "langgraph>=0.2.6",
    "langchain>=0.3.19",
    "langchain-google-genai",
    "python-dotenv>=1.0.1",
    "langgraph-sdk>=0.1.57",
    "langgraph-cli",
    "langgraph-api",
    # FastAPI and Web Framework
    "fastapi>=0.110.0",
    "uvicorn[standard]>=0.29.0",
    "pydantic>=2.6.0",
    "pydantic-settings>=2.2.0",
    "python-multipart>=0.0.9",
    "httpx>=0.27.0",
    # Database
    "sqlalchemy>=2.0.28",
    "alembic>=1.13.1",
    "psycopg2-binary>=2.9.9",
    # External APIs
    "pytrends>=4.9.2",
    "google-api-python-client>=2.120.0",
    "google-auth-httplib2>=0.2.0",
    "google-auth-oauthlib>=1.2.0",
    "aiohttp>=3.9.0",
    "pandas>=2.0.0",
    # Authentication & Security
    "python-jose[cryptography]>=3.3.0",
    "cryptography>=42.0.0",
    "passlib[bcrypt]>=1.7.4",
    "email-validator>=2.1.1",
    # Task Queue
    "redis>=5.0.3",
    "celery[redis]>=5.3.6",
    "flower>=2.0.1",
    # AI Services
    "google-generativeai>=0.8.0",
    "openai>=1.51.0",
    "anthropic>=0.39.0",
    "langchain-openai>=0.2.0",
    "langchain-anthropic>=0.2.0",
    # Utilities
    "requests>=2.31.0",
    "beautifulsoup4>=4.12.3",
    "boto3>=1.34.0",
    "pillow>=10.2.0",
    "pandas>=2.2.1",
    "numpy>=1.26.4",
]


[project.optional-dependencies]
dev = [
    "mypy>=1.11.1", 
    "ruff>=0.6.1",
    "pytest>=8.1.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=5.0.0",
    "black>=24.2.0",
    "isort>=5.13.0",
    "flake8>=7.0.0",
    "pre-commit>=3.7.0",
    "factory-boy>=3.3.0",
    "faker>=24.0.0",
]

[build-system]
requires = ["setuptools>=73.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.ruff]
lint.select = [
    "E",    # pycodestyle
    "F",    # pyflakes
    "I",    # isort
    "D",    # pydocstyle
    "D401", # First line should be in imperative mood
    "T201",
    "UP",
]
lint.ignore = [
    "UP006",
    "UP007",
    # We actually do want to import from typing_extensions
    "UP035",
    # Relax the convention by _not_ requiring documentation for every function parameter.
    "D417",
    "E501",
]
[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D", "UP"]
[tool.ruff.lint.pydocstyle]
convention = "google"

[dependency-groups]
dev = [
    "langgraph-cli[inmem]>=0.1.71",
    "pytest>=8.3.5",
]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 88

[tool.mypy]
python_version = "3.11"
disallow_untyped_defs = true
disallow_any_unimported = true
no_implicit_optional = true
check_untyped_defs = true
warn_return_any = true
warn_unused_ignores = true
show_error_codes = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
markers = [
    "integration: marks tests as integration tests (deselect with '-m \"not integration\"')",
    "asyncio: marks tests as async tests",
]
