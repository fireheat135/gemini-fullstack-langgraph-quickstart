version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: seo-agent-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: seo_agent_db
      POSTGRES_USER: seo_agent_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_change_in_production}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/schema:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - seo-agent-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U seo_agent_user -d seo_agent_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: seo-agent-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - seo-agent-network
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password_change_in_production}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: seo-agent-backend
    restart: unless-stopped
    environment:
      # Application
      APP_NAME: "SEO Agent Platform"
      APP_VERSION: "1.0.0"
      DEBUG: "false"
      ENVIRONMENT: "production"
      
      # Database
      DATABASE_URL: "postgresql://seo_agent_user:${POSTGRES_PASSWORD:-secure_password_change_in_production}@postgres:5432/seo_agent_db"
      
      # Redis
      REDIS_URL: "redis://:${REDIS_PASSWORD:-redis_password_change_in_production}@redis:6379/0"
      
      # Security
      SECRET_KEY: ${SECRET_KEY:-change-this-secret-key-in-production}
      ACCESS_TOKEN_EXPIRE_MINUTES: "30"
      
      # AI APIs
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      GOOGLE_SEARCH_API_KEY: ${GOOGLE_SEARCH_API_KEY}
      GOOGLE_SEARCH_ENGINE_ID: ${GOOGLE_SEARCH_ENGINE_ID}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      
      # CORS
      BACKEND_CORS_ORIGINS: "https://yourdomain.com,https://www.yourdomain.com"
    ports:
      - "8000:8000"
    volumes:
      - ./backend/uploads:/app/uploads
    networks:
      - seo-agent-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: seo-agent-frontend
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    networks:
      - seo-agent-network
    depends_on:
      backend:
        condition: service_healthy
    volumes:
      - ./ssl:/etc/nginx/ssl:ro  # SSL certificates
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # LangGraph API Server (Optional - if running separately)
  langgraph:
    image: langchain/langgraph-api:latest
    container_name: seo-agent-langgraph
    restart: unless-stopped
    environment:
      LANGSMITH_API_KEY: ${LANGSMITH_API_KEY}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
    ports:
      - "8123:8000"
    volumes:
      - ./backend/src/agent:/app/agent
    networks:
      - seo-agent-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  seo-agent-network:
    driver: bridge